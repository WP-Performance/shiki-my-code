{"version":3,"file":"vendors-node_modules_shiki_dist_langs_hcl_mjs.js","mappings":"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","sources":["webpack://shiki-my-code/./node_modules/shiki/dist/langs/hcl.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"HashiCorp HCL\", \"fileTypes\": [\"hcl\"], \"name\": \"hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attribute_definition\" }, { \"include\": \"#block\" }, { \"include\": \"#expressions\" }], \"repository\": { \"attribute_access\": { \"begin\": \"\\\\.(?!\\\\*)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.accessor.hcl\" } }, \"comment\": \"Matches traversal attribute access such as .attr\", \"end\": \"[[:alpha:]][\\\\w-]*|\\\\d*\", \"endCaptures\": { \"0\": { \"patterns\": [{ \"comment\": \"Attribute name\", \"match\": \"(?!null|false|true)[[:alpha:]][\\\\w-]*\", \"name\": \"variable.other.member.hcl\" }, { \"comment\": \"Optional attribute index\", \"match\": \"\\\\d+\", \"name\": \"constant.numeric.integer.hcl\" }] } } }, \"attribute_definition\": { \"captures\": { \"1\": { \"name\": \"punctuation.section.parens.begin.hcl\" }, \"2\": { \"name\": \"variable.other.readwrite.hcl\" }, \"3\": { \"name\": \"punctuation.section.parens.end.hcl\" }, \"4\": { \"name\": \"keyword.operator.assignment.hcl\" } }, \"comment\": 'Identifier \"=\" with optional parens', \"match\": \"(\\\\()?(\\\\b(?!null\\\\b|false\\\\b|true\\\\b)[[:alpha:]][[:alnum:]_-]*)(\\\\))?\\\\s*(\\\\=(?!\\\\=|\\\\>))\\\\s*\", \"name\": \"variable.declaration.hcl\" }, \"attribute_splat\": { \"begin\": \"\\\\.\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.accessor.hcl\" } }, \"comment\": \"Legacy attribute-only splat\", \"end\": \"\\\\*\", \"endCaptures\": { \"0\": { \"name\": \"keyword.operator.splat.hcl\" } } }, \"block\": { \"begin\": \"([\\\\w][\\\\-\\\\w]*)([^?\\\\r\\\\n]*)(\\\\{)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"comment\": \"Block type\", \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\", \"name\": \"entity.name.type.hcl\" }] }, \"2\": { \"patterns\": [{ \"comment\": \"Block label (String Literal)\", \"match\": '\\\\\"[^\\\\\"\\\\r\\\\n]*\\\\\"', \"name\": \"variable.other.enummember.hcl\" }, { \"comment\": \"Block label (Indentifier)\", \"match\": \"[[:alpha:]][[:alnum:]_-]*\", \"name\": \"variable.other.enummember.hcl\" }] }, \"3\": { \"name\": \"punctuation.section.block.begin.hcl\" } }, \"comment\": 'This will match HCL blocks like `thing1 \"one\" \"two\" {` or `thing2 {`', \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.block.end.hcl\" } }, \"name\": \"meta.block.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attribute_definition\" }, { \"include\": \"#expressions\" }, { \"include\": \"#block\" }] }, \"block_inline_comments\": { \"begin\": \"/\\\\*\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Inline comments start with the /* sequence and end with the */ sequence, and may have any characters within except the ending sequence. An inline comment is considered equivalent to a whitespace sequence\", \"end\": \"\\\\*/\", \"name\": \"comment.block.hcl\" }, \"brackets\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.begin.hcl\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.hcl\" } }, \"patterns\": [{ \"comment\": \"Splat operator\", \"match\": \"\\\\*\", \"name\": \"keyword.operator.splat.hcl\" }, { \"include\": \"#comma\" }, { \"include\": \"#comments\" }, { \"include\": \"#inline_for_expression\" }, { \"include\": \"#inline_if_expression\" }, { \"include\": \"#expressions\" }, { \"include\": \"#local_identifiers\" }] }, \"char_escapes\": { \"comment\": \"Character Escapes\", \"match\": '\\\\\\\\[nrt\"\\\\\\\\]|\\\\\\\\u(\\\\h{8}|\\\\h{4})', \"name\": \"constant.character.escape.hcl\" }, \"comma\": { \"comment\": \"Commas - used in certain expressions\", \"match\": \"\\\\,\", \"name\": \"punctuation.separator.hcl\" }, \"comments\": { \"patterns\": [{ \"include\": \"#hash_line_comments\" }, { \"include\": \"#double_slash_line_comments\" }, { \"include\": \"#block_inline_comments\" }] }, \"double_slash_line_comments\": { \"begin\": \"//\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Line comments start with // sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\", \"end\": \"$\\\\n?\", \"name\": \"comment.line.double-slash.hcl\" }, \"expressions\": { \"patterns\": [{ \"include\": \"#literal_values\" }, { \"include\": \"#operators\" }, { \"include\": \"#tuple_for_expression\" }, { \"include\": \"#object_for_expression\" }, { \"include\": \"#brackets\" }, { \"include\": \"#objects\" }, { \"include\": \"#attribute_access\" }, { \"include\": \"#attribute_splat\" }, { \"include\": \"#functions\" }, { \"include\": \"#parens\" }] }, \"for_expression_body\": { \"patterns\": [{ \"comment\": \"in keyword\", \"match\": \"\\\\bin\\\\b\", \"name\": \"keyword.operator.word.hcl\" }, { \"comment\": \"if keyword\", \"match\": \"\\\\bif\\\\b\", \"name\": \"keyword.control.conditional.hcl\" }, { \"match\": \"\\\\:\", \"name\": \"keyword.operator.hcl\" }, { \"include\": \"#expressions\" }, { \"include\": \"#comments\" }, { \"include\": \"#comma\" }, { \"include\": \"#local_identifiers\" }] }, \"functions\": { \"begin\": \"([:\\\\-\\\\w]+)(\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*::([[:alpha:]][\\\\w_-]*::)?[[:alpha:]][\\\\w_-]*\\\\b\", \"name\": \"support.function.namespaced.hcl\" }, { \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*\\\\b\", \"name\": \"support.function.builtin.hcl\" }] }, \"2\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Built-in function calls\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.end.hcl\" } }, \"name\": \"meta.function-call.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expressions\" }, { \"include\": \"#comma\" }] }, \"hash_line_comments\": { \"begin\": \"#\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Line comments start with # sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\", \"end\": \"$\\\\n?\", \"name\": \"comment.line.number-sign.hcl\" }, \"hcl_type_keywords\": { \"comment\": \"Type keywords known to HCL.\", \"match\": \"\\\\b(any|string|number|bool|list|set|map|tuple|object)\\\\b\", \"name\": \"storage.type.hcl\" }, \"heredoc\": { \"begin\": \"(\\\\<\\\\<\\\\-?)\\\\s*(\\\\w+)\\\\s*$\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.heredoc.hcl\" }, \"2\": { \"name\": \"keyword.control.heredoc.hcl\" } }, \"comment\": \"String Heredoc\", \"end\": \"^\\\\s*\\\\2\\\\s*$\", \"endCaptures\": { \"0\": { \"name\": \"keyword.control.heredoc.hcl\" } }, \"name\": \"string.unquoted.heredoc.hcl\", \"patterns\": [{ \"include\": \"#string_interpolation\" }] }, \"inline_for_expression\": { \"captures\": { \"1\": { \"name\": \"keyword.control.hcl\" }, \"2\": { \"patterns\": [{ \"match\": \"\\\\=\\\\>\", \"name\": \"storage.type.function.hcl\" }, { \"include\": \"#for_expression_body\" }] } }, \"match\": \"(for)\\\\b(.*)\\\\n\" }, \"inline_if_expression\": { \"begin\": \"(if)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.hcl\" } }, \"end\": \"\\\\n\", \"patterns\": [{ \"include\": \"#expressions\" }, { \"include\": \"#comments\" }, { \"include\": \"#comma\" }, { \"include\": \"#local_identifiers\" }] }, \"language_constants\": { \"comment\": \"Language Constants\", \"match\": \"\\\\b(true|false|null)\\\\b\", \"name\": \"constant.language.hcl\" }, \"literal_values\": { \"patterns\": [{ \"include\": \"#numeric_literals\" }, { \"include\": \"#language_constants\" }, { \"include\": \"#string_literals\" }, { \"include\": \"#heredoc\" }, { \"include\": \"#hcl_type_keywords\" }] }, \"local_identifiers\": { \"comment\": \"Local Identifiers\", \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\", \"name\": \"variable.other.readwrite.hcl\" }, \"numeric_literals\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.separator.exponent.hcl\" } }, \"comment\": \"Integer, no fraction, optional exponent\", \"match\": \"\\\\b\\\\d+([Ee][+-]?)\\\\d+\\\\b\", \"name\": \"constant.numeric.float.hcl\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.separator.decimal.hcl\" }, \"2\": { \"name\": \"punctuation.separator.exponent.hcl\" } }, \"comment\": \"Integer, fraction, optional exponent\", \"match\": \"\\\\b\\\\d+(\\\\.)\\\\d+(?:([Ee][+-]?)\\\\d+)?\\\\b\", \"name\": \"constant.numeric.float.hcl\" }, { \"comment\": \"Integers\", \"match\": \"\\\\b\\\\d+\\\\b\", \"name\": \"constant.numeric.integer.hcl\" }] }, \"object_for_expression\": { \"begin\": \"(\\\\{)\\\\s?(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.braces.begin.hcl\" }, \"2\": { \"name\": \"keyword.control.hcl\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.end.hcl\" } }, \"patterns\": [{ \"match\": \"\\\\=\\\\>\", \"name\": \"storage.type.function.hcl\" }, { \"include\": \"#for_expression_body\" }] }, \"object_key_values\": { \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#literal_values\" }, { \"include\": \"#operators\" }, { \"include\": \"#tuple_for_expression\" }, { \"include\": \"#object_for_expression\" }, { \"include\": \"#heredoc\" }, { \"include\": \"#functions\" }] }, \"objects\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.begin.hcl\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.end.hcl\" } }, \"name\": \"meta.braces.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#objects\" }, { \"include\": \"#inline_for_expression\" }, { \"include\": \"#inline_if_expression\" }, { \"captures\": { \"1\": { \"name\": \"meta.mapping.key.hcl variable.other.readwrite.hcl\" }, \"2\": { \"name\": \"keyword.operator.assignment.hcl\" } }, \"comment\": \"Literal, named object key\", \"match\": \"\\\\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)\\\\s*(\\\\=(?!=))\\\\s*\" }, { \"captures\": { \"1\": { \"name\": \"meta.mapping.key.hcl string.quoted.double.hcl\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.hcl\" }, \"3\": { \"name\": \"punctuation.definition.string.end.hcl\" }, \"4\": { \"name\": \"keyword.operator.hcl\" } }, \"comment\": \"String object key\", \"match\": '^\\\\s*((\").*(\"))\\\\s*(\\\\=)\\\\s*' }, { \"begin\": \"^\\\\s*\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Computed object key (any expression between parens)\", \"end\": \"(\\\\))\\\\s*(=|:)\\\\s*\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.parens.end.hcl\" }, \"2\": { \"name\": \"keyword.operator.hcl\" } }, \"name\": \"meta.mapping.key.hcl\", \"patterns\": [{ \"include\": \"#attribute_access\" }, { \"include\": \"#attribute_splat\" }] }, { \"include\": \"#object_key_values\" }] }, \"operators\": { \"patterns\": [{ \"match\": \"\\\\>\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\<\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\=\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\!\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\+\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\-\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\*\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\/\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\%\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\&\\\\&\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\|\\\\|\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\!\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\>\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\<\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\?\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\.\\\\.\\\\.\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\:\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\=\\\\>\", \"name\": \"keyword.operator.hcl\" }] }, \"parens\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Parens - matched *after* function syntax\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.end.hcl\" } }, \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expressions\" }] }, \"string_interpolation\": { \"begin\": \"(?<![%$])([%$]{)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.interpolation.begin.hcl\" } }, \"comment\": \"String interpolation\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"keyword.other.interpolation.end.hcl\" } }, \"name\": \"meta.interpolation.hcl\", \"patterns\": [{ \"comment\": \"Trim left whitespace\", \"match\": \"\\\\~\\\\s\", \"name\": \"keyword.operator.template.left.trim.hcl\" }, { \"comment\": \"Trim right whitespace\", \"match\": \"\\\\s\\\\~\", \"name\": \"keyword.operator.template.right.trim.hcl\" }, { \"comment\": \"if/else/endif and for/in/endfor directives\", \"match\": \"\\\\b(if|else|endif|for|in|endfor)\\\\b\", \"name\": \"keyword.control.hcl\" }, { \"include\": \"#expressions\" }, { \"include\": \"#local_identifiers\" }] }, \"string_literals\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.hcl\" } }, \"comment\": \"Strings\", \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.hcl\" } }, \"name\": \"string.quoted.double.hcl\", \"patterns\": [{ \"include\": \"#string_interpolation\" }, { \"include\": \"#char_escapes\" }] }, \"tuple_for_expression\": { \"begin\": \"(\\\\[)\\\\s?(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.brackets.begin.hcl\" }, \"2\": { \"name\": \"keyword.control.hcl\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.hcl\" } }, \"patterns\": [{ \"include\": \"#for_expression_body\" }] } }, \"scopeName\": \"source.hcl\" });\nvar hcl = [\n  lang\n];\n\nexport { hcl as default };\n"],"names":[],"sourceRoot":""}