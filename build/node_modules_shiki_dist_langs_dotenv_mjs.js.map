{"version":3,"file":"node_modules_shiki_dist_langs_dotenv_mjs.js","mappings":";;;;;;;;;;;;;AAAA,6BAA6B,0DAA0D,cAAc,OAAO,eAAe,4BAA4B,KAAK,6DAA6D,IAAI,cAAc,OAAO,eAAe,mBAAmB,GAAG,SAAS,8CAA8C,SAAS,gDAAgD,4BAA4B,IAAI,oCAAoC,IAAI,oCAAoC,IAAI,6BAA6B,KAAK,+DAA+D,mBAAmB,0BAA0B,cAAc,OAAO,eAAe,6BAA6B,IAAI,iCAAiC,KAAK,+FAA+F,yBAAyB,oFAAoF,EAAE,+CAA+C,qBAAqB,cAAc,OAAO,8CAA8C,SAAS,yCAAyC,SAAS,8CAA8C,uEAAuE,SAAS,IAAI,WAAW,cAAc,OAAO,qCAAqC,SAAS,8CAA8C,wBAAwB,KAAK,iDAAiD,oBAAoB,sEAAsE,4BAA4B,6FAA6F,gBAAgB,iEAAiE,gCAAgC;AAChxD;AACA;AACA;;AAE6B","sources":["webpack://shiki-my-code/./node_modules/shiki/dist/langs/dotenv.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"dotEnv\", \"name\": \"dotenv\", \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#line-comment\" }] } }, \"comment\": \"Full Line Comment\", \"match\": \"^\\\\s?(#.*$)\\\\n\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#key\" }] }, \"2\": { \"name\": \"keyword.operator.assignment.dotenv\" }, \"3\": { \"name\": \"property.value.dotenv\", \"patterns\": [{ \"include\": \"#line-comment\" }, { \"include\": \"#double-quoted-string\" }, { \"include\": \"#single-quoted-string\" }, { \"include\": \"#interpolation\" }] } }, \"comment\": \"ENV entry\", \"match\": \"^\\\\s?(.*?)\\\\s?(\\\\=)(.*)$\" }], \"repository\": { \"double-quoted-string\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#interpolation\" }, { \"include\": \"#escape-characters\" }] } }, \"comment\": \"Double Quoted String\", \"match\": '\"(.*)\"', \"name\": \"string.quoted.double.dotenv\" }, \"escape-characters\": { \"comment\": \"Escape characters\", \"match\": `\\\\\\\\[nrtfb\"'\\\\\\\\]|\\\\\\\\u[0123456789ABCDEF]{4}`, \"name\": \"constant.character.escape.dotenv\" }, \"interpolation\": { \"captures\": { \"1\": { \"name\": \"keyword.interpolation.begin.dotenv\" }, \"2\": { \"name\": \"variable.interpolation.dotenv\" }, \"3\": { \"name\": \"keyword.interpolation.end.dotenv\" } }, \"comment\": \"Interpolation (variable substitution)\", \"match\": \"(\\\\$\\\\{)(.*)(\\\\})\" }, \"key\": { \"captures\": { \"1\": { \"name\": \"keyword.key.export.dotenv\" }, \"2\": { \"name\": \"variable.key.dotenv\", \"patterns\": [{ \"include\": \"#variable\" }] } }, \"comment\": \"Key\", \"match\": \"(export\\\\s)?(.*)\" }, \"line-comment\": { \"comment\": \"Comment\", \"match\": \"#.*$\", \"name\": \"comment.line.dotenv\" }, \"single-quoted-string\": { \"comment\": \"Single Quoted String\", \"match\": \"'(.*)'\", \"name\": \"string.quoted.single.dotenv\" }, \"variable\": { \"comment\": \"env variable\", \"match\": \"[a-zA-Z_]+[a-zA-Z0-9_]*\" } }, \"scopeName\": \"source.dotenv\" });\nvar dotenv = [\n  lang\n];\n\nexport { dotenv as default };\n"],"names":[],"sourceRoot":""}